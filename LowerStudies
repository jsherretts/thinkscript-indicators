# bollinger beauty 

declare lower;


plot Data = TTM_ScalperAlert()."PivotLow" is true and close crosses below BollingerBands()."LowerBand" from 1 bars ago;

plot Data1 = TTM_ScalperAlert()."PivotLow" is true and SimpleMovingAvg("length" = 3)."SMA" crosses below BollingerBands()."LowerBand" from 1 bars ago;


#beasty 3

declare lower;


plot Data = SchaffTrendCycle()."STC" is greater than 90 and HACOLT() is equal to 100 and DarvasBox()."Buy Signal" is true within 3 bars;


#Awesome 3
#declare lower;

plot Data = ErgodicOsc()."ErgodicOsc" is greater than 0 and AwesomeOscillator()."AO" is greater than 0 and AroonIndicator()."Up" is greater than  AroonIndicator()."Down" is less than AroonIndicator()."Up";


Awesomepolymom3
declare lower ;


plot Data = AwesomeOscillator()."AO" is greater than 0 and ErgodicOsc()."ErgodicOsc" is greater than 0 and LBR_ThreeTenOscillator()."Hist" is greater than 0;

#Quadsetup

AwesomeOscillator()."AO" is greater than 0 and ElliotOscillator()."ElliotOsc" is greater than 0 and ErgodicOsc()."ErgodicOsc" is greater than 0 and TrendQuality()."TQ" is greater than 0



DARVAS STRAT 

input tradesize = 1 ;

def state = {default state_1, state_2, state_3, state_4, state_5};

def upper;
def lower;

def prevLower = CompoundValue(1, lower[1], low);
def prevUpper = CompoundValue(1, upper[1], high);

switch (state[1]) {
case state_1:
    lower = low;
    if (prevUpper >= high) {
        upper = high[1];
        state = state.state_2;
    } else {
        upper = high;
        state = state.state_1;
    }
case state_2:
    if (prevUpper >= high) {
        lower = low;
        upper = prevUpper;
        state = state.state_3;
    } else {
        lower = low;
        upper = high;
        state = state.state_1;
    }
case state_3:
    if (prevUpper < high) {
        lower = low;
        upper = high;
        state = state.state_1;
    } else if (prevLower > low) {
        lower = low;
        upper = prevUpper;
        state = state.state_3;
    } else {
        lower = prevLower;
        upper = prevUpper;
        state = state.state_4;
    }
case state_4:
    if (prevUpper < high) {
        lower = low;
        upper = high;
        state = state.state_1;
    } else if (prevLower > low) {
        lower = low;
        upper = prevUpper;
        state = state.state_3;
    } else {
        lower = prevLower;
        upper = prevUpper;
        state = state.state_5;
    }
case state_5:
    if (prevUpper < high) {
        lower = low;
        upper = high;
        state = state.state_1;
    } else if (prevLower > low) {
        lower = low;
        upper = high;
        state = state.state_1;
    } else {
        lower = prevLower;
        upper = prevUpper;
        state = state.state_5;
    }
}

def barNumber = BarNumber();
def barCount = HighestAll(If(IsNaN(close), 0, barNumber));
def boxNum;
def boxUpperIndex;

plot "Upper Band";
plot "Lower Band";
plot "Buy Signal" = CompoundValue(1, state[1] == state.state_5 and prevUpper < high, no);
plot "Sell Signal" = CompoundValue(1, state[1] == state.state_5 and prevLower > low, no);

if (IsNaN(close)) {
    boxNum = boxNum[1] + 1;
    boxUpperIndex = 0;
    "Upper Band" = Double.NaN;
    "Lower Band" = Double.NaN;
} else {
    boxNum = TotalSum("Buy Signal" or "Sell Signal");
    boxUpperIndex = fold indx = 0 to barCount - barNumber + 2 with valInd = Double.NaN
        while IsNaN(valInd)
        do if (GetValue(boxNum, -indx) != boxNum)
            then indx
            else Double.NaN;
    "Upper Band" = GetValue(upper, -boxUpperIndex + 1);
    "Lower Band" = GetValue(lower, -boxUpperIndex + 1);
}

"Upper Band".SetDefaultColor(CreateColor(10, 156, 35));
"Lower Band".SetDefaultColor(Color.RED);
"Sell Signal".SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_DOWN);
"Sell Signal".SetDefaultColor(Color.RED);
"Buy Signal".SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);
"Buy Signal".SetDefaultColor(CreateColor(10, 156, 35));


AddOrder(OrderType.BUY_AUTO,"Buy Signal" , tickColor = GetColor(1), arrowColor = GetColor(1), name = "buyin");


AddOrder(OrderType.SELL_to_close,"Sell Signal", arrowColor = GetColor(2), name = "take profit");



#movingAverage
declare lower;

plot Data = close is greater than SimpleMovingAvg()."SMA" from 1 bars ago and close is greater than SimpleMovingAvg("length" = 21, "show breakout signals" = yes)."SMA" from 1 bars ago;



#Schaff bot
input fastLength = 23;
input slowLength = 50;
input KPeriod = 10;
input DPeriod = 3;
input over_bought = 75;
input over_sold = 25;
input averageType = AverageType.EXPONENTIAL;

def macd = MovingAverage(averageType, close, fastLength) - MovingAverage(averageType, close, slowLength);
def fastK1 = FastKCustom(macd, KPeriod);
def fastD1 = MovingAverage(averageType, fastK1, DPeriod);
def fastK2 = FastKCustom(fastD1, KPeriod);
def STC = MovingAverage(averageType, fastK2, DPeriod);
def OverBought = over_bought;
def OverSold = over_sold;

def Buy = SchaffTrendCycle()."STC" crosses above 25;
def profit = SchaffTrendCycle()."STC" crosses below 75;
def short = SchaffTrendCycle()."STC" crosses below 80;
def cover = SchaffTrendCycle()."STC" crosses above 5;


AddOrder(OrderType.BUY_TO_OPEN, Buy, tickcolor = GetColor(3), arrowcolor = GetColor(3), name = "Buy");
AddOrder(OrderType.SELL_TO_OPEN,short , tickcolor = GetColor(4), arrowcolor = GetColor(4), name = "schaff short");
AddOrder(OrderType.SELL_TO_CLOSE, profit, tickcolor = GetColor(5), arrowcolor = GetColor(5), name = "profit");
AddOrder(OrderType.BUY_TO_CLOSE, cover, tickcolor = GetColor(6), arrowcolor = GetColor(6), name = "cover");





#percentR trading bot




input length = 14;
input over_Sold = 20;
input over_Bought = 80;

def highest = Highest(high, length);
def divisor = highest - Lowest(low, length);

def "%R" = if divisor equals 0 then 0 else 100 - 100 * (highest - close) / divisor;
def OverBought = over_Bought;
def OverSold = over_Sold;



def buyToOpen =  PercentR()."%R" crosses above 20 ;
def buyToClose= PercentR()."%R" crosses above 80 ;
def sellToOpen= PercentR()."%R" crosses below 75; 
def sellToClose= PercentR()."%R" crosses below 20;


AddOrder(OrderType.BUY_TO_OPEN, buyToOpen, tickcolor = GetColor(3), arrowcolor = GetColor(3), name = "DonchianLE");
AddOrder(OrderType.SELL_TO_OPEN, sellToOpen, tickcolor = GetColor(4), arrowcolor = GetColor(4), name = "DonchianSE");
AddOrder(OrderType.SELL_TO_CLOSE, sellToClose, tickcolor = GetColor(5), arrowcolor = GetColor(5), name = "DonchianLX");
AddOrder(OrderType.BUY_TO_CLOSE, buyToClose, tickcolor = GetColor(6), arrowcolor = GetColor(6), name = "DonchianSX");

input length = 14;
input over_Sold = 20;
input over_Bought = 80;

def highest = Highest(high, length);
def divisor = highest - Lowest(low, length);

def "%R" = if divisor equals 0 then 0 else 100 - 100 * (highest - close) / divisor;
def OverBought = over_Bought;
def OverSold = over_Sold;






plot buy = PercentR()."%R" crosses above 20;

plot sell = PercentR()."%R" crosses above 75;

plot shortsell = PercentR()."%R" crosses below 75;

plot covershort = PercentR()."%R" crosses below 20;





AddOrder(OrderType.BUY_TO_OPEN, buy, tickcolor = GetColor(3), arrowcolor = GetColor(3), name = "buy");
#AddOrder(OrderType.SELL_TO_OPEN, shortsell, tickcolor = GetColor(4), arrowcolor = GetColor(4), name = "shortsell");
AddOrder(OrderType.SELL_TO_CLOSE, sell, tickcolor = GetColor(5), arrowcolor = GetColor(5), name = "profit");
#AddOrder(OrderType.BUY_TO_CLOSE, covershort, tickcolor = GetColor(6), arrowcolor = GetColor(6), name = "covershort");
