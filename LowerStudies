# bollinger beauty 

declare lower;


plot Data = TTM_ScalperAlert()."PivotLow" is true and close crosses below BollingerBands()."LowerBand" from 1 bars ago;

plot Data1 = TTM_ScalperAlert()."PivotLow" is true and SimpleMovingAvg("length" = 3)."SMA" crosses below BollingerBands()."LowerBand" from 1 bars ago;


#beasty 3

declare lower;


plot Data = SchaffTrendCycle()."STC" is greater than 90 and HACOLT() is equal to 100 and DarvasBox()."Buy Signal" is true within 3 bars;


#Awesome 3
#declare lower;

plot Data = ErgodicOsc()."ErgodicOsc" is greater than 0 and AwesomeOscillator()."AO" is greater than 0 and AroonIndicator()."Up" is greater than  AroonIndicator()."Down" is less than AroonIndicator()."Up";


Awesomepolymom3
declare lower ;


plot Data = AwesomeOscillator()."AO" is greater than 0 and ErgodicOsc()."ErgodicOsc" is greater than 0 and LBR_ThreeTenOscillator()."Hist" is greater than 0;

#Quadsetup

AwesomeOscillator()."AO" is greater than 0 and ElliotOscillator()."ElliotOsc" is greater than 0 and ErgodicOsc()."ErgodicOsc" is greater than 0 and TrendQuality()."TQ" is greater than 0



DARVAS STRAT 

input tradesize = 1 ;

def state = {default state_1, state_2, state_3, state_4, state_5};

def upper;
def lower;

def prevLower = CompoundValue(1, lower[1], low);
def prevUpper = CompoundValue(1, upper[1], high);

switch (state[1]) {
case state_1:
    lower = low;
    if (prevUpper >= high) {
        upper = high[1];
        state = state.state_2;
    } else {
        upper = high;
        state = state.state_1;
    }
case state_2:
    if (prevUpper >= high) {
        lower = low;
        upper = prevUpper;
        state = state.state_3;
    } else {
        lower = low;
        upper = high;
        state = state.state_1;
    }
case state_3:
    if (prevUpper < high) {
        lower = low;
        upper = high;
        state = state.state_1;
    } else if (prevLower > low) {
        lower = low;
        upper = prevUpper;
        state = state.state_3;
    } else {
        lower = prevLower;
        upper = prevUpper;
        state = state.state_4;
    }
case state_4:
    if (prevUpper < high) {
        lower = low;
        upper = high;
        state = state.state_1;
    } else if (prevLower > low) {
        lower = low;
        upper = prevUpper;
        state = state.state_3;
    } else {
        lower = prevLower;
        upper = prevUpper;
        state = state.state_5;
    }
case state_5:
    if (prevUpper < high) {
        lower = low;
        upper = high;
        state = state.state_1;
    } else if (prevLower > low) {
        lower = low;
        upper = high;
        state = state.state_1;
    } else {
        lower = prevLower;
        upper = prevUpper;
        state = state.state_5;
    }
}

def barNumber = BarNumber();
def barCount = HighestAll(If(IsNaN(close), 0, barNumber));
def boxNum;
def boxUpperIndex;

plot "Upper Band";
plot "Lower Band";
plot "Buy Signal" = CompoundValue(1, state[1] == state.state_5 and prevUpper < high, no);
plot "Sell Signal" = CompoundValue(1, state[1] == state.state_5 and prevLower > low, no);

if (IsNaN(close)) {
    boxNum = boxNum[1] + 1;
    boxUpperIndex = 0;
    "Upper Band" = Double.NaN;
    "Lower Band" = Double.NaN;
} else {
    boxNum = TotalSum("Buy Signal" or "Sell Signal");
    boxUpperIndex = fold indx = 0 to barCount - barNumber + 2 with valInd = Double.NaN
        while IsNaN(valInd)
        do if (GetValue(boxNum, -indx) != boxNum)
            then indx
            else Double.NaN;
    "Upper Band" = GetValue(upper, -boxUpperIndex + 1);
    "Lower Band" = GetValue(lower, -boxUpperIndex + 1);
}

"Upper Band".SetDefaultColor(CreateColor(10, 156, 35));
"Lower Band".SetDefaultColor(Color.RED);
"Sell Signal".SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_DOWN);
"Sell Signal".SetDefaultColor(Color.RED);
"Buy Signal".SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);
"Buy Signal".SetDefaultColor(CreateColor(10, 156, 35));


AddOrder(OrderType.BUY_AUTO,"Buy Signal" , tickColor = GetColor(1), arrowColor = GetColor(1), name = "buyin");


AddOrder(OrderType.SELL_to_close,"Sell Signal", arrowColor = GetColor(2), name = "take profit");



#movingAverage
declare lower;

plot Data = close is greater than SimpleMovingAvg()."SMA" from 1 bars ago and close is greater than SimpleMovingAvg("length" = 21, "show breakout signals" = yes)."SMA" from 1 bars ago;



#Schaff bot
input fastLength = 23;
input slowLength = 50;
input KPeriod = 10;
input DPeriod = 3;
input over_bought = 75;
input over_sold = 25;
input averageType = AverageType.EXPONENTIAL;

def macd = MovingAverage(averageType, close, fastLength) - MovingAverage(averageType, close, slowLength);
def fastK1 = FastKCustom(macd, KPeriod);
def fastD1 = MovingAverage(averageType, fastK1, DPeriod);
def fastK2 = FastKCustom(fastD1, KPeriod);
def STC = MovingAverage(averageType, fastK2, DPeriod);
def OverBought = over_bought;
def OverSold = over_sold;

def Buy = SchaffTrendCycle()."STC" crosses above 25;
def profit = SchaffTrendCycle()."STC" crosses below 75;
def short = SchaffTrendCycle()."STC" crosses below 80;
def cover = SchaffTrendCycle()."STC" crosses above 5;


AddOrder(OrderType.BUY_TO_OPEN, Buy, tickcolor = GetColor(3), arrowcolor = GetColor(3), name = "Buy");
AddOrder(OrderType.SELL_TO_OPEN,short , tickcolor = GetColor(4), arrowcolor = GetColor(4), name = "schaff short");
AddOrder(OrderType.SELL_TO_CLOSE, profit, tickcolor = GetColor(5), arrowcolor = GetColor(5), name = "profit");
AddOrder(OrderType.BUY_TO_CLOSE, cover, tickcolor = GetColor(6), arrowcolor = GetColor(6), name = "cover");





#percentR trading bot




input length = 14;
input over_Sold = 20;
input over_Bought = 80;

def highest = Highest(high, length);
def divisor = highest - Lowest(low, length);

def "%R" = if divisor equals 0 then 0 else 100 - 100 * (highest - close) / divisor;
def OverBought = over_Bought;
def OverSold = over_Sold;



def buyToOpen =  PercentR()."%R" crosses above 20 ;
def buyToClose= PercentR()."%R" crosses above 80 ;
def sellToOpen= PercentR()."%R" crosses below 75; 
def sellToClose= PercentR()."%R" crosses below 20;


AddOrder(OrderType.BUY_TO_OPEN, buyToOpen, tickcolor = GetColor(3), arrowcolor = GetColor(3), name = "DonchianLE");
AddOrder(OrderType.SELL_TO_OPEN, sellToOpen, tickcolor = GetColor(4), arrowcolor = GetColor(4), name = "DonchianSE");
AddOrder(OrderType.SELL_TO_CLOSE, sellToClose, tickcolor = GetColor(5), arrowcolor = GetColor(5), name = "DonchianLX");
AddOrder(OrderType.BUY_TO_CLOSE, buyToClose, tickcolor = GetColor(6), arrowcolor = GetColor(6), name = "DonchianSX");

input length = 14;
input over_Sold = 20;
input over_Bought = 80;

def highest = Highest(high, length);
def divisor = highest - Lowest(low, length);

def "%R" = if divisor equals 0 then 0 else 100 - 100 * (highest - close) / divisor;
def OverBought = over_Bought;
def OverSold = over_Sold;






plot buy = PercentR()."%R" crosses above 20;

plot sell = PercentR()."%R" crosses above 75;

plot shortsell = PercentR()."%R" crosses below 75;

plot covershort = PercentR()."%R" crosses below 20;





AddOrder(OrderType.BUY_TO_OPEN, buy, tickcolor = GetColor(3), arrowcolor = GetColor(3), name = "buy");
#AddOrder(OrderType.SELL_TO_OPEN, shortsell, tickcolor = GetColor(4), arrowcolor = GetColor(4), name = "shortsell");
AddOrder(OrderType.SELL_TO_CLOSE, sell, tickcolor = GetColor(5), arrowcolor = GetColor(5), name = "profit");
#AddOrder(OrderType.BUY_TO_CLOSE, covershort, tickcolor = GetColor(6), arrowcolor = GetColor(6), name = "covershort");



# Candlestick Reversal System
# Assembled by BenTen at useThinkScript.com
# Converted from https://www.tradingview.com/script/H5290fLn-Candlestick-Reversal-System/
# orders added by jsherretts 3/8/21
input extreme_reversal = yes;
input outside_reversal = yes;
input doji_reversal = yes;

def O = open;
def C = close;
def H = high;
def L = low;

input bodysize = 0.525;
input barsback = 50;
input bodymultiplier = 2;

def mybodysize = absValue(C - O);
def AverageBody = simpleMovingAvg(mybodysize, barsback);
def mycandlesize = (H - L);
def AverageCandle = simpleMovingAvg(mycandlesize, barsback);

def Elongsignal = ((O[1] - C[1]) >= (bodysize * (H[1] - L[1]))) and ((H[1] - L[1]) > (AverageCandle * bodymultiplier)) and ((O[1] - C[1]) >  AverageBody) and (C > O);
def Eshortsignal = ((C[1] - O[1]) >= (bodysize * (H[1] - L[1]))) and ((H[1] - L[1]) > (AverageCandle * bodymultiplier)) and ((C[1] - O[1]) >  AverageBody) and (O > C);

input BarMultiplier = 1.25;

def AverageCandle1 = simpleMovingAvg(mycandlesize, BarsBack);

def Olongsignal = L < L[1] and C > H[1] and (H - L) >= AverageCandle1 * BarMultiplier;
def Oshortsignal = H > H[1] and C < L[1] and (H - L) >= AverageCandle1 * BarMultiplier;

input percentage = 0.1;

def frangehl = H[1] - L[1];
def frangeco = absValue(C[1] - O[1]);
def sma10 = simpleMovingAvg(close, 10);

def Dshortsignal = (frangeco <= frangehl * percentage and C < L[1] and L[1] > sma10 and C < O)  or (C < L[2] and C[1] >= L[2] and frangeco <= frangeco * percentage and C < O and L[2] > sma10);
def Dlongsignal = (frangeco <= frangehl * percentage and C > H[1] and H[1] < sma10 and C > O)  or (C > H[2] and C[1] <= H[2] and frangeco <= frangeco * percentage and C > O and H[2] < sma10);

plot bullish_extreme = if extreme_reversal then Elongsignal else double.nan;
plot bearish_extreme = if extreme_reversal then Eshortsignal else double.nan;

plot bullish_outside = if outside_reversal then Olongsignal else double.nan;
plot bearish_outside = if outside_reversal then Oshortsignal else double.nan;

plot bullish_doji = if doji_reversal then Dlongsignal else double.nan;
plot bearish_doji = if doji_reversal then Dshortsignal else double.nan;

bullish_extreme.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);
bullish_extreme.SetDefaultColor(Color.CYAN);
bullish_extreme.SetLineWeight(1);
bearish_extreme.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_DOWN);
bearish_extreme.SetDefaultColor(Color.CYAN);
bearish_extreme.SetLineWeight(1);

bullish_outside.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);
bullish_outside.SetDefaultColor(Color.MAGENTA);
bullish_outside.SetLineWeight(1);
bearish_outside.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_DOWN);
bearish_outside.SetDefaultColor(Color.MAGENTA);
bearish_outside.SetLineWeight(1);

bullish_doji.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);
bullish_doji.SetDefaultColor(Color.YELLOW);
bullish_doji.SetLineWeight(1);
bearish_doji.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_DOWN);
bearish_doji.SetDefaultColor(Color.YELLOW);
bearish_doji.SetLineWeight(1);





AddOrder(OrderType.BUY_TO_OPEN, bullish_doji or bullish_outside or bullish_extreme, tickcolor = GetColor(3), arrowcolor = GetColor(3), name = "BUY");
AddOrder(OrderType.SELL_TO_CLOSE,bearish_doji or bearish_outside or bearish_extreme, tickcolor = GetColor(4), arrowcolor = GetColor(4), name = "PROFIT");
#AddOrder(OrderType.SELL_TO_OPEN, 0, tickcolor = GetColor(5), arrowcolor = GetColor(5), name = "DonchianLX");
#AddOrder(OrderType.BUY_TO_CLOSE, 0, tickcolor = GetColor(6), arrowcolor = GetColor(6), name = "DonchianSX");


#AddOrder(OrderType.BUY_AUTO,bullish_extreme, tickcolor = GetColor(3), arrowcolor = GetColor(3), name = "BUYNOW");
#AddOrder(OrderType.SELL_AUTO,bearish_extreme, tickcolor = GetColor(4), arrowcolor = GetColor(4), name = "SELLNOW");



#dmireversalbot 



input length = 10;
input highLowLength = 3;
input sumLength = 3;
input averageLength = 3;

def stoch = DMI_StochasticExtreme(length, highLowLength, sumLength);
def avgStoch = Average(stoch, averageLength);

def Above = stoch crosses above avgStoch;
def Below = stoch crosses below avgStoch;
def Buy = Above;
def sell = Below;

#plot Above = stoch crosses above avgStoch;
#plot Below = stoch crosses below avgStoch;
#Below.SetDefaultColor(Color.DOWNTICK);
#Below.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_DOWN);
#Above.SetDefaultColor(Color.UPTICK);
#Above.SetPaintingStrategy(PaintingStrategy.BOOLEAN_ARROW_UP);

AddOrder(OrderType.BUY_AUTO, stoch crosses above avgStoch , open[1], 1, Color.CYAN, Color.CYAN);

AddOrder(OrderType.SELL_TO_CLOSE,stoch crosses below avgStoch, open[1], 1, Color.MAGENTA, Color.MAGENTA);

#AddOrder(OrderType.sell_to_open, sell, open[1], 1, Color.MAGENTA, Color.MAGENTA);

#AddOrder(OrderType.buy_to_close, buy , open[1], 1, Color.MAGENTA, Color.MAGENTA);


input LineLimit = 200;
input SizeLabels = yes;

def bid = close(priceType = "Bid");
def ask = close(priceType = "Ask");
def barNumber = BarNumber();
def Mark = close(priceType = "Mark");
def Last = close(priceType = "Last");
#Dynamic_Line
script dynamic {
    input LineLimit = 200;
    input c = close;
    def bar = if IsNaN(c)
             then bar[1]
             else BarNumber();
    def ThisBar = HighestAll(bar);
    def cLine   = if bar == ThisBar
                 then c
                 else Double.NaN;

    plot P = if ThisBar - LineLimit <= bar
           then HighestAll(cLine)
           else Double.NaN;
}

plot B = dynamic(linelimit = LineLimit, c = bid);
B .SetDefaultColor(Color.GREEN);
B.SetStyle(Curve.FIRM);
B .SetLineWeight(1);

plot A = dynamic(linelimit = LineLimit, c = ask);
A .SetDefaultColor(Color.MAGENTA);
A.SetStyle(Curve.FIRM);
A .SetLineWeight(1);
def Dir = if Last == bid then 1 else 0;
def NotDir = if (Last != bid) or (Last != ask) then 1 else 0;
AddCloud(if Dir then A else Double.NaN, if Dir then B else Double.NaN, Color.GREEN, Color.CURRENT);
AddCloud(if !Dir then A else Double.NaN, if !Dir then B else Double.NaN, Color.RED, Color.CURRENT);
AddCloud(if NotDir then A else Double.NaN, B, Color.GRAY, Color.CURRENT);

AddLabel(yes, Concat("BID: ", AsDollars(close(priceType = "BID"))), if Dir then Color.GREEN else Color.ORANGE );
AddLabel(yes, Concat("ASK: ", AsDollars(close(priceType = "ASK"))), if Dir then Color.ORANGE else Color.GREEN);
def spread = close(priceType = PriceType.ASK) - close(priceType = PriceType.BID);
def spread_l1 = 0.05;
def spread_l2 = 0.15;
AddLabel(1, "Spread: " + spread, if  spread <= spread_l1 then Color.GREEN else if spread_l1 < spread <= spread_l2 then Color.YELLOW else COLOR.RED);


#added orders long and short
# Chaos Bands Conversion by WalkingBallista and BenTen for cherif
# https://www.tradingview.com/script/YE3wLwsR-Fractal-Chaos-Bands-Backtest/
# https://usethinkscript.com/d/134-fractal-chaos-bands-indicator-for-thinkorswim

input sequenceCount = 1;

def maxSideLength = sequenceCount + 10;
def upRightSide = fold i1 = 1 to maxSideLength + 1 with count1 while count1 != sequenceCount and count1 != -1 do
    if GetValue(high, -i1) > high or (GetValue(high, -i1) == high and count1 == 0) then -1
    else if GetValue(high, -i1) < high then count1 + 1 else count1;
def upLeftSide = fold i2 = 1 to maxSideLength + 1 with count2 while count2 != sequenceCount and count2 != -1 do
    if GetValue(high, i2) > high or (GetValue(high, i2) == high and count2 >= 1) then -1
    else if GetValue(high, i2) < high then count2 + 1 else count2;

def downRightSide = fold i3 = 1 to maxSideLength + 1 with count3 while count3 != sequenceCount and count3 != -1 do
    if GetValue(low, -i3) < low or (GetValue(low, -i3) == low and count3 == 0) then -1
    else if GetValue(high, -i3) > low then count3 + 1 else count3;
def downLeftSide = fold i4 = 1 to maxSideLength + 1 with count4 while count4 != sequenceCount and count4 != -1 do
    if GetValue(low, i4) < low or (GetValue(low, i4) == low and count4 >= 1) then -1
    else if GetValue(low, i4) > low then count4 + 1 else count4;

def fractalUp = if upRightSide == sequenceCount and upLeftSide == sequenceCount then high else fractalUp[1];
def fractalDown = if downRightSide == sequenceCount and downLeftSide == sequenceCount then low else fractalDown[1];

plot UpFractal = fractalUp;
plot DownFractal = fractalDown;

#AddOrder(OrderType.BUY_AUTO, close > UpFractal, tickcolor = GetColor(1), arrowcolor = GetColor(1), name = "FCB_L");

#AddOrder(OrderType.SELL_AUTO, close < DownFractal, tickcolor = GetColor(1), arrowcolor = GetColor(1), name = "FCB_S");

# long strat

AddOrder(OrderType.BUY_TO_OPEN,close > UpFractal, tickcolor = GetColor(3), arrowcolor = GetColor(3), name = "buy");
AddOrder(OrderType.SELL_TO_CLOSE,close < DownFractal, tickcolor = GetColor(5), arrowcolor = GetColor(5), name = "profit");

# short strat
AddOrder(OrderType.SELL_TO_OPEN, close < DownFractal, tickcolor = GetColor(4), arrowcolor = GetColor(4), name = "short");

AddOrder(OrderType.BUY_TO_CLOSE, close > UpFractal, tickcolor = GetColor(6), arrowcolor = GetColor(6), name = "covershort");

#ehlersstochasticbot

input price = close;
input length = 20;
input cutoffLength = 10;
input over_bought = 0.8;
input over_sold = 0.2;
input mode = {default Predictive, Conventional};

def filt = reference EhlersRoofingFilter(price, cutoffLength);
def highestP = Highest(filt, length);
def lowestP = Lowest(filt, length);
def stoch = if (highestP - lowestP) != 0 then (filt - lowestP) / (highestP - lowestP) else 0;
def Stochastic = reference EhlersSuperSmootherFilter(stoch, cutoffLength);
def OverBought = over_bought;
def OverSold = over_sold;



def Buy = EhlersStochastic()."Stochastic" crosses above 0.2;
def superbuy = EhlersStochastic()."Stochastic" is equal to 0;
def  Sell = EhlersStochastic()."Stochastic" crosses below 0.8;
def supersell = EhlersStochastic()."Stochastic" crosses above 1;

#AddOrder(OrderType.BUY_TO_OPEN,BUY or superbuy, tickcolor = GetColor(3), arrowcolor = GetColor(3), name = "new bot");
AddOrder(OrderType.SELL_TO_OPEN,supersell or sell, tickcolor = GetColor(4), arrowcolor = GetColor(4), name = "shortsell");
#AddOrder(OrderType.SELL_TO_CLOSE,sell, tickcolor = GetColor(5), arrowcolor = GetColor(5), name = "profit");
AddOrder(OrderType.BUY_TO_CLOSE, Buy, tickcolor = GetColor(6), arrowcolor = GetColor(6), name = "covershort");



# stochasticmomoindex long & short 
input over_bought = 40.0;
input over_sold = -40.0;
input percentDLength = 3;
input percentKLength = 5;

def min_low = Lowest(low, percentKLength);
def max_high = Highest(high, percentKLength);
def rel_diff = close - (max_high + min_low) / 2;
def diff = max_high - min_low;

def avgrel = ExpAverage(ExpAverage(rel_diff, percentDLength), percentDLength);
def avgdiff = ExpAverage(ExpAverage(diff, percentDLength), percentDLength);

def SMI = if avgdiff != 0 then avgrel / (avgdiff / 2) * 100 else 0;


def AvgSMI = ExpAverage(SMI, percentDLength);


def overbought = over_bought;

def oversold = over_sold;


def stochbuy = StochasticMomentumIndex()."SMI" crosses above StochasticMomentumIndex()."AvgSMI";

def stochsell = StochasticMomentumIndex()."SMI" crosses below StochasticMomentumIndex()."AvgSMI";

AddOrder(OrderType.BUY_TO_OPEN, stochbuy, tickcolor = GetColor(3), arrowcolor = GetColor(3), name = "buyin");
AddOrder(OrderType.SELL_TO_OPEN,stochsell, tickcolor = GetColor(4), arrowcolor = GetColor(4), name = "short");
AddOrder(OrderType.SELL_TO_CLOSE, stochsell, tickcolor = GetColor(5), arrowcolor = GetColor(5), name = "cha-ching");
AddOrder(OrderType.BUY_TO_CLOSE,stochbuy, tickcolor = GetColor(6), arrowcolor = GetColor(6), name = "cover");

